#include "trigaussquad.h"

//=================================================================
/*
  Input: n --- the order o the Gaussian Quadrature (n<6)
  Output: pw --- a n by 3 matrix
  1st column gives the x-coord of the Gaussian Quadrature
  2nd column gives the y-coord of the Gaussian Quadrature
  3rd column gives the weights
*/
void GetStandTriQuadPW(int n, Array<double *> &pw)
{
  if(n==1)
    {
      pw[0][0] = 1.0/3.0;
      pw[0][1] = 1.0/3.0;
      pw[0][2] = 0.5;
    }
  else if(n==2)
    {
      pw[0][0] = 1.0/6.0;
      pw[0][1] = 1.0/6.0;
      pw[0][2] = 1.0/6.0;

      pw[1][0] = 1.0/6.0;
      pw[1][1] = 2.0/3.0;
      pw[1][2] = 1.0/6.0;

      pw[2][0] = 2.0/3.0;
      pw[2][1] = 1.0/6.0;
      pw[2][2] = 1.0/6.0;
    }
  else if(n==3)
    {
      pw[0][0] = 1.0/3.0;
      pw[0][1] = 1.0/3.0;
      pw[0][2] = -27.0/96.0;

      pw[1][0] = 1.0/5.0;
      pw[1][1] = 1.0/5.0;
      pw[1][2] = 25.0/96.0;

      pw[2][0] = 1.0/5.0;
      pw[2][1] = 3.0/5.0;
      pw[2][2] = 25.0/96.0;

      pw[3][0] = 3.0/5.0;
      pw[3][1] = 1.0/5.0;
      pw[3][2] = 25.0/96.0;
    } 
  else if(n==4)
    {
      pw[0][0] = 0.445948490915965;
      pw[0][1] = 0.445948490915965;
      pw[0][2] = 0.223381589678011;

      pw[1][0] = 0.445948490915965;
      pw[1][1] = 0.108103018168070;
      pw[1][2] = 0.223381589678011;

      pw[2][0] = 0.108103018168070;
      pw[2][1] = 0.445948490915965;
      pw[2][2] = 0.223381589678011;

      pw[3][0] = 0.091576213509771;
      pw[3][1] = 0.091576213509771;
      pw[3][2] = 0.109951743655322;
      
      pw[4][0] = 0.091576213509771;
      pw[4][1] = 0.816847572980459;
      pw[4][2] = 0.109951743655322;

      pw[5][0] = 0.816847572980459;
      pw[5][1] = 0.091576213509771;
      pw[5][2] = 0.109951743655322;

      for(int k=0; k<6; k++) pw[k][2] *= 0.5;
    }
  else if(n==5)
    {
      pw[0][0] = 1.0/3.0;
      pw[0][1] = 1.0/3.0;
      pw[0][2] = 0.1125;

      pw[1][0] = 0.4701420641051150897704412095134;
      pw[1][1] = 0.4701420641051150897704412095134;
      pw[1][2] = 0.06619707639425309036882469391658; 

      pw[2][0] = 0.4701420641051150897704412095134;
      pw[2][1] = 0.0597158717897698204591175809731;
      pw[2][2] = 0.06619707639425309036882469391658; 

      pw[3][0] = 0.0597158717897698204591175809731;
      pw[3][1] = 0.4701420641051150897704412095134;
      pw[3][2] = 0.06619707639425309036882469391658; 
      
      pw[4][0] = 0.1012865073234563388009873619151;
      pw[4][1] = 0.1012865073234563388009873619151;
      pw[4][2] = 0.06296959027241357629784197275009;

      pw[5][0] = 0.1012865073234563388009873619151;
      pw[5][1] = 0.7974269853530873223980252761698;
      pw[5][2] = 0.06296959027241357629784197275009;

      pw[6][0] = 0.7974269853530873223980252761698;
      pw[6][1] = 0.1012865073234563388009873619151;
      pw[6][2] = 0.06296959027241357629784197275009;
    }
  else if(n==6)
    {
      pw[0][0] = 0.063089014491502;
      pw[0][1] = 0.063089014491502;
      pw[0][2] = 0.0254224531851035;

      pw[1][0] = 0.063089014491502;
      pw[1][1] = 0.873821971016996;
      pw[1][2] = 0.0254224531851035;

      pw[2][0] = 0.873821971016996;
      pw[2][1] = 0.063089014491502;
      pw[2][2] = 0.0254224531851035;

      pw[3][0] = 0.249286745170911;
      pw[3][1] = 0.249286745170911;
      pw[3][2] = 0.0583931378631895;

      pw[4][0] = 0.249286745170911;
      pw[4][1] = 0.501426509658179;
      pw[4][2] = 0.0583931378631895;

      pw[5][0] = 0.501426509658179;
      pw[5][1] = 0.249286745170911;
      pw[5][2] = 0.0583931378631895;

      pw[6][0] = 0.310352451033785;
      pw[6][1] = 0.053145049844816;
      pw[6][2] = 0.041425537809187;

      pw[7][0] = 0.310352451033785;
      pw[7][1] = 0.636502499121399;
      pw[7][2] = 0.041425537809187;

      pw[8][0] = 0.053145049844816;
      pw[8][1] = 0.310352451033785;
      pw[8][2] = 0.041425537809187;

      pw[9][0] = 0.053145049844816;
      pw[9][1] = 0.636502499121399;
      pw[9][2] = 0.041425537809187;

      pw[10][0] = 0.636502499121399;
      pw[10][1] = 0.310352451033785;
      pw[10][2] = 0.041425537809187;

      pw[11][0] = 0.636502499121399;
      pw[11][1] = 0.053145049844816;
      pw[11][2] = 0.041425537809187;
    }
  else if(n==7)
    {
      pw[0][0] = 0.33333333333333;
      pw[0][1] = 0.33333333333333;
      pw[0][2] = -0.074785022233835;

      pw[1][0] = 0.2603459661;
      pw[1][1] = 0.2603459661;
      pw[1][2] = 0.087807628716602;

      pw[2][0] = 0.4793080678;
      pw[2][1] = 0.2603459661;
      pw[2][2] = 0.087807628716602;

      pw[3][0] = 0.2603459661;
      pw[3][1] = 0.4793080678;
      pw[3][2] = 0.087807628716602;

      pw[4][0] = 0.0651301029;
      pw[4][1] = 0.0651301029;
      pw[4][2] = 0.026673617804419;

      pw[5][0] = 0.8697397942;
      pw[5][1] = 0.0651301029;
      pw[5][2] = 0.026673617804419;

      pw[6][0] = 0.0651301029;
      pw[6][1] = 0.8697397942;
      pw[6][2] = 0.026673617804419;

      pw[7][0] = 0.31286549600487;
      pw[7][1] = 0.04869031542532;
      pw[7][2] = 0.038556880445128;

      pw[8][0] = 0.04869031542532;
      pw[8][1] = 0.31286549600487;
      pw[8][2] = 0.038556880445128;

      pw[9][0] = 0.63844418856981;
      pw[9][1] = 0.04869031542532;
      pw[9][2] = 0.038556880445128;

      pw[10][0] = 0.63844418856981;
      pw[10][1] = 0.31286549600487;
      pw[10][2] = 0.038556880445128;

      pw[11][0] = 0.04869031542532;
      pw[11][1] = 0.63844418856981;
      pw[11][2] = 0.038556880445128;

      pw[12][0] = 0.31286549600487;
      pw[12][1] = 0.63844418856981;
      pw[12][2] = 0.038556880445128;
    }
  else
    {
      cout << "Input Error: n" << n << endl;
    }
}

//==================================================

void GetStandLineQuadPW(int n, Array<double *> &pw)
{
  if(n==1)
    {
      pw[0][0] = 0.0;
      pw[0][1] = 2.0;
    }
  else if(n==2)
    {
      pw[0][0] = -sqrt(3.0)/3.0;
      pw[0][1] = 1.0;

      pw[1][0] = sqrt(3.0)/3.0;
      pw[1][1] = 1.0;
    }
  else if(n==3)
    {
      pw[0][0] = 0.0;
      pw[0][1] = 8.0/9.0;

      pw[1][0] = -sqrt(0.6);
      pw[1][1] = 5.0/9.0;

      pw[2][0] = sqrt(0.6);
      pw[2][1] = 5.0/9.0;
    }
  else if(n==4)
    {
      pw[0][0] = -sqrt( 3.0/7.0 - 2.0*sqrt(1.2)/7.0 );
      pw[0][1] = 0.5 + sqrt(30.0)/36.0;

      pw[1][0] = sqrt( 3.0/7.0 - 2.0*sqrt(1.2)/7.0 );
      pw[1][1] = 0.5 + sqrt(30.0)/36.0;

      pw[2][0] = -sqrt( 3.0/7.0 + 2.0*sqrt(1.2)/7.0 );
      pw[2][1] = 0.5 - sqrt(30.0)/36.0;

      pw[3][0] = sqrt( 3.0/7.0 + 2.0*sqrt(1.2)/7.0 );
      pw[3][1] = 0.5 - sqrt(30.0)/36.0;
    }
  else if(n==5)
    {
      pw[0][0] = 0.0;
      pw[0][1] = 128.0/225.0;

      pw[1][0] = -sqrt( 5.0 - 2.0*sqrt(10.0/7.0) )/3.0;
      pw[1][1] = ( 322.0 + 13.0*sqrt(70.0) ) / 900.0;

      pw[2][0] = sqrt( 5.0 - 2.0*sqrt(10.0/7.0) )/3.0;
      pw[2][1] = ( 322.0 + 13.0*sqrt(70.0) ) / 900.0;

      pw[3][0] = -sqrt( 5.0 + 2.0*sqrt(10.0/7.0) )/3.0;
      pw[3][1] = ( 322.0 - 13.0*sqrt(70.0) ) / 900.0;

      pw[4][0] = sqrt( 5.0 + 2.0*sqrt(10.0/7.0) )/3.0;
      pw[4][1] = ( 322.0 - 13.0*sqrt(70.0) ) / 900.0;
    }
  else
    cout << "Input Error: Gauss Quadrature Points n" << endl;
}

//==================================================

double GetElementInt(int n, double &detJ, Array<double> &fv)
{
  int np = ConvertN2PN(n);
  double tem = 0.0;
 
  Array<double *> pw(np);
  for(int i=0; i<np; i++) pw[i] = new double[3];
  
  GetStandTriQuadPW(n, pw);

  for(int i=0; i<np; i++)
    tem += pw[i][2] * fv[i] * detJ;

  for(int i=0; i<np; i++) delete []pw[i];
  
  return tem;
}

//===================================================

int ConvertN2PN(int n)
{
  if(n==7)
    return 13;
  else if(n==6)
    return 12;
  else if(n==5)
    return 7;
  else if(n==4)
    return 6;
  else if(n==3)
    return 4;
  else if(n==2)
    return 3;
  else if(n==1)
    return 1;
  else
    return 0;
}
